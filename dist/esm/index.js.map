{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\n\r\ntype FetchResult = { price: number; time: Date }[];\r\ntype LargestTimeDifference = {\r\n  largestDifference: number;\r\n  item1: Date;\r\n  item2: Date;\r\n};\r\ntype ResponseType = {\r\n  success: boolean;\r\n  error: null | string;\r\n  result: {\r\n    range: {\r\n      start: Date;\r\n      end: Date;\r\n    } | null;\r\n  };\r\n  timestamp: number;\r\n};\r\n\r\ntype FetchFunction = (id: number) => Promise<FetchResult>;\r\nfunction createHandler(ttl: number, fetchFunc: FetchFunction) {\r\n  const cache: { [key: string]: ResponseType } = {};\r\n  const lock: { [key: string]: boolean } = {};\r\n  return async function (req: Request, res: Response) {\r\n    const id = parseInt(req.query.id as string);\r\n    if (!isNaN(id) && id > 0) {\r\n      if (cache[id] && Date.now() - cache[id].timestamp <= ttl) {\r\n        const { timestamp, ...responseWithoutTimestamp } = cache[id];\r\n        res.status(200).json(responseWithoutTimestamp);\r\n        return;\r\n      }\r\n      while (lock[id]) {\r\n        await new Promise((resolve) => setTimeout(resolve, 10));\r\n      }\r\n      lock[id] = true;\r\n      const result = await fetchFunc(id);\r\n\r\n      const filteredArray = getFilteredArray(result);\r\n      if (filteredArray.length <= 1) {\r\n        const response = {\r\n          success: true,\r\n          error: null,\r\n          result: {\r\n            range: null,\r\n          },\r\n        };\r\n        res.status(200).json(response);\r\n        lock[id] = false;\r\n      }\r\n\r\n      const timeDifferenceResult: LargestTimeDifference =\r\n        findLargestTimeDifference(sortByTime(filteredArray));\r\n      if (timeDifferenceResult.largestDifference === 0) {\r\n        const response = {\r\n          success: true,\r\n          error: null,\r\n          result: {\r\n            range: null,\r\n          },\r\n        };\r\n        cache[id] = { ...response, timestamp: Date.now() };\r\n        res.status(200).json(response);\r\n        lock[id] = false;\r\n      } else {\r\n        const response = {\r\n          success: true,\r\n          error: null,\r\n          result: {\r\n            range: {\r\n              start: timeDifferenceResult.item1,\r\n              end: timeDifferenceResult.item2,\r\n            },\r\n          },\r\n        };\r\n        cache[id] = { ...response, timestamp: Date.now() };\r\n        res.status(200).json(response);\r\n        lock[id] = false;\r\n      }\r\n    } else {\r\n      res.status(400).json({\r\n        success: false,\r\n        error: \"Something went wrong\",\r\n        result: null,\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport const getFilteredArray = (arr: FetchResult): FetchResult => {\r\n  const averagePrice =\r\n    arr.reduce(\r\n      (accumulator, currentItem) => accumulator + currentItem.price,\r\n      0\r\n    ) / arr.length;\r\n  return arr.filter((item) => item.price > averagePrice);\r\n};\r\n\r\nexport const sortByTime = (arr: FetchResult): FetchResult => {\r\n  return arr.sort((a, b) => a.time.getTime() - b.time.getTime());\r\n};\r\n\r\nexport const findLargestTimeDifference = (\r\n  arr: FetchResult\r\n): LargestTimeDifference => {\r\n  let largestDifference = 0;\r\n  let largestDifferenceItem1 = arr[0].time;\r\n  let largestDifferenceItem2 = arr[1].time;\r\n\r\n  for (let i = 1; i < arr.length; i++) {\r\n    const difference = arr[i].time.getTime() - arr[i - 1].time.getTime();\r\n    if (difference > largestDifference) {\r\n      largestDifference = difference;\r\n      largestDifferenceItem1 = arr[i - 1].time;\r\n      largestDifferenceItem2 = arr[i].time;\r\n    }\r\n  }\r\n\r\n  return {\r\n    largestDifference,\r\n    item1: largestDifferenceItem1,\r\n    item2: largestDifferenceItem2,\r\n  };\r\n};\r\n\r\nexport { createHandler };\r\n// module.exports = createHandler;\r\n"],"names":["createHandler","ttl","fetchFunc","cache","lock","req","res","id","parseInt","query","isNaN","Date","now","timestamp","responseWithoutTimestamp","__rest","status","json","Promise","resolve","setTimeout","result","filteredArray","getFilteredArray","length","response","success","error","range","timeDifferenceResult","findLargestTimeDifference","sortByTime","largestDifference","Object","assign","start","item1","end","item2","arr","averagePrice","reduce","accumulator","currentItem","price","filter","item","sort","a","b","time","getTime","largestDifferenceItem1","largestDifferenceItem2","i","difference"],"mappings":"qSAqBA,SAASA,EAAcC,EAAaC,GAClC,MAAMC,EAAyC,CAAA,EACzCC,EAAmC,CAAA,EACzC,OAAO,SAAgBC,EAAcC,4CACnC,MAAMC,EAAKC,SAASH,EAAII,MAAMF,IAC9B,IAAKG,MAAMH,IAAOA,EAAK,EAAG,CACxB,GAAIJ,EAAMI,IAAOI,KAAKC,MAAQT,EAAMI,GAAIM,WAAaZ,EAAK,CACxD,MAAsBa,2UAAhBC,CAA6CZ,EAAMI,GAAnD,CAAA,cAEN,YADAD,EAAIU,OAAO,KAAKC,KAAKH,EAEtB,CACD,KAAOV,EAAKG,UACJ,IAAIW,SAASC,GAAYC,WAAWD,EAAS,MAErDf,EAAKG,IAAM,EACX,MAAMc,QAAenB,EAAUK,GAEzBe,EAAgBC,EAAiBF,GACvC,GAAIC,EAAcE,QAAU,EAAG,CAC7B,MAAMC,EAAW,CACfC,SAAS,EACTC,MAAO,KACPN,OAAQ,CACNO,MAAO,OAGXtB,EAAIU,OAAO,KAAKC,KAAKQ,GACrBrB,EAAKG,IAAM,CACZ,CAED,MAAMsB,EACJC,EAA0BC,EAAWT,IACvC,GAA+C,IAA3CO,EAAqBG,kBAAyB,CAChD,MAAMP,EAAW,CACfC,SAAS,EACTC,MAAO,KACPN,OAAQ,CACNO,MAAO,OAGXzB,EAAMI,GAAG0B,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EAAQT,GAAQ,CAAEZ,UAAWF,KAAKC,QAC3CN,EAAIU,OAAO,KAAKC,KAAKQ,GACrBrB,EAAKG,IAAM,CACZ,KAAM,CACL,MAAMkB,EAAW,CACfC,SAAS,EACTC,MAAO,KACPN,OAAQ,CACNO,MAAO,CACLO,MAAON,EAAqBO,MAC5BC,IAAKR,EAAqBS,SAIhCnC,EAAMI,GAAG0B,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EAAQT,GAAQ,CAAEZ,UAAWF,KAAKC,QAC3CN,EAAIU,OAAO,KAAKC,KAAKQ,GACrBrB,EAAKG,IAAM,CACZ,CACF,MACCD,EAAIU,OAAO,KAAKC,KAAK,CACnBS,SAAS,EACTC,MAAO,uBACPN,OAAQ,UAIhB,CAEa,MAAAE,EAAoBgB,IAC/B,MAAMC,EACJD,EAAIE,QACF,CAACC,EAAaC,IAAgBD,EAAcC,EAAYC,OACxD,GACEL,EAAIf,OACV,OAAOe,EAAIM,QAAQC,GAASA,EAAKF,MAAQJ,GAAa,EAG3CT,EAAcQ,GAClBA,EAAIQ,MAAK,CAACC,EAAGC,IAAMD,EAAEE,KAAKC,UAAYF,EAAEC,KAAKC,YAGzCrB,EACXS,IAEA,IAAIP,EAAoB,EACpBoB,EAAyBb,EAAI,GAAGW,KAChCG,EAAyBd,EAAI,GAAGW,KAEpC,IAAK,IAAII,EAAI,EAAGA,EAAIf,EAAIf,OAAQ8B,IAAK,CACnC,MAAMC,EAAahB,EAAIe,GAAGJ,KAAKC,UAAYZ,EAAIe,EAAI,GAAGJ,KAAKC,UACvDI,EAAavB,IACfA,EAAoBuB,EACpBH,EAAyBb,EAAIe,EAAI,GAAGJ,KACpCG,EAAyBd,EAAIe,GAAGJ,KAEnC,CAED,MAAO,CACLlB,oBACAI,MAAOgB,EACPd,MAAOe,EACR"}